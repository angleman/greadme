#!/usr/bin/env node

var express = require('express');
var app = express();
var path = require('path');
var fs = require('fs')
var md = require('marked')
var http = require('http')
var request = require('request')
var open = require('open');

process.title = 'greadme';

var args = process.argv.slice();
var host = 'localhost';
var port;
var pIndex;

if (~(pIndex = args.indexOf('--port'))) {
  port = args[pIndex + 1];
  // remove port arguments
  args.splice(pIndex, 2);
} else {
  port = 8124;
}

var fileArg = args[2];

// get github css
getStyle(function (err, css) {
  if (err) throw err;

  app.use(express.favicon());
  app.use('/css', express.static(path.join(__dirname, '..', 'css')))
  app.use(function (req, res, next) {
    if (fileArg) {
      render(fs.readFileSync(path.join(process.cwd(), fileArg), 'utf8'), function (err, markdown) {
        if (err) return next(err);
        res.render(path.join(__dirname, '..', 'view.ejs'), {
          css: css,
          markdown: markdown,
          dir: false
        });
      });
    } else {
      var p = path.join(process.cwd(), req.url.substring(1));
      var stat = fs.statSync(p);
      var dir = stat.isDirectory();
      var file = dir ? readme(p) : p;
      var contents = file ? fs.readFileSync(file, 'utf8') : 'No readme found';
      render(contents, function (err, markdown) {
        if (err) return next(err);
        res.render(path.join(__dirname, '..', 'view.ejs'), {
          css: css,
          markdown: markdown,
          dir: dir && listDir(p)
        });
      });
    }
  });
  var server = http.createServer(app).listen(port, host)

  server.on('listening', function () {
    var url = 'http://' + host + ':' + port
    console.log("\n  view your markdown at \u001B[32m%s/\u001B[0m", url)
    open(url, function (err) {
      // ignore errors
    })
  });

})


function endthis() {
	process.exit(0);
}


function readme (dir) {
  var exts = 'markdown md'.split(' ');
  var file;
  var names = 'README Readme readme'.split(' ');
  if (names.some(function (name) {
    return exts.some(function (ext) {
      try {
        var filename = dir + '/' + name + '.' + ext;
        var stat = fs.statSync(filename);
        file = filename;
        return true;
      } catch (err) {
        return false;
      }
    })
  })) {
    return file;
  }
}

function getStyle (cb) {
      var css = [];
        css.unshift('/css/style.css')
    cb(null, css);
}

function listDir (dir) {
  var all = fs.readdirSync(dir);
  var md = [];
  var dirs = dir == process.cwd() ? [] : ['..'];
  all.forEach(function (item) {
    var stat = fs.statSync(path.join(dir, item));
    if (stat.isDirectory()) {
      dirs.push(item);
    } else if (stat.isFile() && (/\.md$/.test(item) || /\.markdown$/.test(item))) {
      md.push(item);
    }
  });
  function canonical (item) {
    return {
      href: path.join(dir, item).replace(process.cwd(), '').replace(/\\/g, '/') || '/',
      name: item
    };
  }
  return {
    md: md.map(canonical),
    dirs: dirs.map(canonical)
  }
}

function render (fileContent, cb) {
  request({
    url: 'https://api.github.com/markdown/rawx',
    body: fileContent,
    method: 'POST',
    headers: {
      'content-type': 'text/plain',
      'user-agent': 'greadme'
    },
    timeout: 2000
  }, function (err, res, body) {
    if (err) console.log(err);
	setInterval(endthis, 1000) // no need to keep console locked up after page rendered
    if (err || res.statusCode != 200) {
      return cb(null, md(fileContent));
    } else {
      return cb(null, body);
    }
  })
}

